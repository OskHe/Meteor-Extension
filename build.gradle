plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }
    mavenCentral()
}

dependencies {
    // Fabric
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Meteor
    modImplementation "meteordevelopment:meteor-client:${project.meteor_version}"
}

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mc_version": project.minecraft_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
}

/*

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    //id 'com.github.johnrengelman.shadow' version '7.1.2'

}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "meteor-maven"
        url = "https://maven.meteordev.org/releases"
    }
    maven {
        name = "meteor-maven-snapshots"
        url = "https://maven.meteordev.org/snapshots"
    }
    jcenter()
}

dependencies {
    /*def library = { id ->
        implementation(id) { exclude group: "org.slf4j" }
        shadow(id) { exclude group: "org.slf4j" }
    }* /

// Fabric
minecraft "com.mojang:minecraft:${project.minecraft_version}"
mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

// Meteor
modImplementation "meteordevelopment:meteor-client:${project.meteor_version}"

//exclude group: "io.netty:netty-transport-native-epoll:4.1.77.Final"

/*implementation("io.netty:netty-handler-proxy:4.1.77.Final") { transitive = false }
shadow("io.netty:netty-handler-proxy:4.1.77.Final") { transitive = false }

// Launch sub project
shadow project("")

configurations.all {
    resolutionStrategy.capabilitiesResolution.withCapability("io.netty:io.netty") {
        def toBeSelected = candidates.find { it.id instanceof ModuleComponentIdentifier && it.id.module == 'log4j-over-slf4j' }
        if (toBeSelected != null) {
            select(toBeSelected)
        }
        because 'use slf4j in place of log4j'
    }
}* /






}

/*shadowJar {
    configurations = [ project.configurations.shadow ]
}

remapJar {
    dependsOn shadowJar
    input.set(shadowJar.archiveFile)
}* /

processResources {
    filesMatching("fabric.mod.json") {
        expand "version": project.version, "mc_version": project.minecraft_version
    }
}

tasks.withType(JavaCompile).configureEach {
    it.options.encoding("UTF-8")
    it.options.release = 17
}

 */
